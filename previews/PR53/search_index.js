var documenterSearchIndex = {"docs":
[{"location":"functions.html#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"functions.html","page":"Functions","title":"Functions","text":"CurrentModule = MaterialModels","category":"page"},{"location":"functions.html","page":"Functions","title":"Functions","text":"initial_material_state\nget_cache\nupdate_cache!","category":"page"},{"location":"functions.html#MaterialModels.initial_material_state","page":"Functions","title":"MaterialModels.initial_material_state","text":"initial_material_state(::AbstractMaterial)\n\nReturn the MaterialState that belongs to the given Material and is initialized with zeros. \n\n\n\n\n\n","category":"function"},{"location":"functions.html#MaterialModels.get_cache","page":"Functions","title":"MaterialModels.get_cache","text":"get_cache(m::AbstractMaterial)\n\nConstruct cache object for iteratively solving non-linear material models.\n\nFor material models which require an iterative solution procedure, it is recommended to allocate storage for the iterative solver only once and reuse it for all material points. When multithreading is used, each threads needs its own cache.\n\nReturns nothing for materials that don't need a cache.\n\n\n\n\n\n","category":"function"},{"location":"functions.html#MaterialModels.update_cache!","page":"Functions","title":"MaterialModels.update_cache!","text":"update_cache!(cache::OnceDifferentiable, f)\n\nUpdate the cache object with the residual function for the current time/load step.\n\nAs the residual functions depend i.a. on the strain increment, the function and its jacobian need to be updated for every load step.\n\n\n\n\n\n","category":"function"},{"location":"materials/TransverselyIsotropic.html#TransverselyIsotropic","page":"TransverselyIsotropic","title":"TransverselyIsotropic","text":"","category":"section"},{"location":"materials/TransverselyIsotropic.html","page":"TransverselyIsotropic","title":"TransverselyIsotropic","text":"TransverselyIsotropic\nmaterial_response(m::TransverselyIsotropic, ε::SymmetricTensor{2,3}, state::TransverselyIsotropicState)","category":"page"},{"location":"materials/TransverselyIsotropic.html#MaterialModels.TransverselyIsotropic","page":"TransverselyIsotropic","title":"MaterialModels.TransverselyIsotropic","text":"TransverselyIsotropic\n\nTransversely isotropic elasticity.\n\nThe material direction (the vector normal to the symmetry plane) is specified in TransverselyIsotropicState, which is constructed with initial_material_state(::TransverselyIsotropic, direction::Vec{3}). The default direction is [1.0, 0.0, 0.0].\n\nArguments\n\nν::Float64: Poisson's ratio\nE_L::Float64: LongitudinalYoung's modulus\nE_T::Float64: Transverse Young's modulus\nG_LT::Float64: In-plane shear modulus\nν_LT::Float64: In-plane Poisson's ratio\nν_TT::Float64: Out-of-plane Poisson's ratio\n\n\n\n\n\n","category":"type"},{"location":"materials/TransverselyIsotropic.html#MaterialModels.material_response-Tuple{TransverselyIsotropic, SymmetricTensor{2, 3}, TransverselyIsotropicState}","page":"TransverselyIsotropic","title":"MaterialModels.material_response","text":"material_response(m::TransverselyIsotropic, ε::SymmetricTensor{2,3}, state::TransverselyIsotropicState)\n\nReturn the stress tensor and the stress tangent for the given strain ε such that\n\nboldsymbolsigma = mathbfE  boldsymbolvarepsilon\n\nwhere\n\nmathbfE = L_perp boldsymbolI otimes boldsymbolI + L_parallel - L_perpboldsymbolIotimesboldsymbolA + boldsymbolAotimesboldsymbolI\n+ M_parallel - 4G_parallel + 2G_perp - 2L_parallel + L_perpboldsymbolAotimesboldsymbolA + 4G_parallel-G_perpmathbfA\n\nmathbfA = frac14 (boldsymbolA overlineotimes boldsymbolI + boldsymbolA underlineotimes boldsymbolI + boldsymbolI overlineotimes boldsymbolA + boldsymbolI underlineotimes boldsymbolA) \n\nboldsymbolA = boldsymbola otimes boldsymbola\n\nand where boldsymbola is the vector normal to the plane of symmetry.\n\n\n\n\n\n","category":"method"},{"location":"interface.html#Material-model-interface","page":"Interface","title":"Material model interface","text":"","category":"section"},{"location":"interface.html","page":"Interface","title":"Interface","text":"For fullfilling the AbstractMaterial interface, the following functions need to be defined:","category":"page"},{"location":"interface.html","page":"Interface","title":"Interface","text":"CurrentModule = MaterialModels","category":"page"},{"location":"interface.html","page":"Interface","title":"Interface","text":"AbstractMaterial\nAbstractMaterialState\nmaterial_response","category":"page"},{"location":"interface.html#MaterialModels.AbstractMaterial","page":"Interface","title":"MaterialModels.AbstractMaterial","text":"AbstractMaterial\n\nStore material parameters here. It can also be used to store constant precomputed properties, e.g. the elastic stiffness tensor. Ideally, the name should be chosen according to the first author of the initial publication of a model. For every Material there should be a keyword constructor and a list of arguments in the docstrings. If possible, also include the reference to a publication.\n\n\n\n\n\n","category":"type"},{"location":"interface.html#MaterialModels.AbstractMaterialState","page":"Interface","title":"MaterialModels.AbstractMaterialState","text":"AbstractMaterialState\n\nStore state variables here. For now, this should not be mutable, a new object should be constructed for every new state. (We can discuss if this is a good or a bad idea.)\n\n\n\n\n\n","category":"type"},{"location":"interface.html#MaterialModels.material_response","page":"Interface","title":"MaterialModels.material_response","text":"material_response(m::AbstractMaterial, Δε::SymmetricTensor{2,3}, state::AbstractMaterialState, Δt; cache, options)\n\nCompute the stress, stress tangent and state variables for the given strain increment Δε and previous state state.\n\nInstead of the strain increment, the total strain could be handed over. Good ideas on how to handle this in general are welcome. For non-continuum kind of material models, the interface should be similar with stress-like and strain-like quantities. (E.g. for cohesive laws traction instead of stress and displacement jump instead of strain.) This function signature must be the same for all material models, even if they don't require all arguments.\n\n\n\n\n\n","category":"function"},{"location":"materials/LinearElastic.html#LinearElastic","page":"LinearElastic","title":"LinearElastic","text":"","category":"section"},{"location":"materials/LinearElastic.html","page":"LinearElastic","title":"LinearElastic","text":"LinearElastic\nmaterial_response(m::LinearElastic, Δε::SymmetricTensor{2,3}, state::LinearElasticState)","category":"page"},{"location":"materials/LinearElastic.html#MaterialModels.LinearElastic","page":"LinearElastic","title":"MaterialModels.LinearElastic","text":"LinearElastic(E, ν)\n\nIsotropic linear elasticity.\n\nArguments\n\nE::Float64: Young's modulus\nν::Float64: Poisson's ratio\n\n\n\n\n\n","category":"type"},{"location":"materials/LinearElastic.html#MaterialModels.material_response-Tuple{LinearElastic, SymmetricTensor{2, 3}, LinearElasticState}","page":"LinearElastic","title":"MaterialModels.material_response","text":"material_response(m::LinearElastic, ε::SymmetricTensor{2,3})\n\nReturn the stress tensor and the stress tangent for the given strain ε such that\n\nboldsymbolsigma = mathbfE^texte  boldsymbolvarepsilon \n\nNo MaterialState is needed for the stress computation, thus if a state is handed over to material_response, the same state is returned.\n\n\n\n\n\n","category":"method"},{"location":"materials/XuNeedleman.html#XuNeedleman","page":"XuNeedleman","title":"XuNeedleman","text":"","category":"section"},{"location":"materials/XuNeedleman.html","page":"XuNeedleman","title":"XuNeedleman","text":"Modules = [MaterialModels]\nPages = [\"XuNeedleman.jl\"]","category":"page"},{"location":"materials/XuNeedleman.html#MaterialModels.XuNeedleman","page":"XuNeedleman","title":"MaterialModels.XuNeedleman","text":"XuNeedleman(σₘₐₓ, τₘₐₓ, Φₙ, Φₜ, Δₙˢ)\n\nXu-Needleman traction-separation law.[Xu1993] This is a commonly used cohesive law for brittle fracture,  however it is revertible and thus not suited for unloading. In 3D, it is isotropic within the cohesive plane.\n\n[Xu1993]: Xu, X. P., & Needleman, A. (1993). Void nucleation by inclusion debonding in a crystal matrix. Modelling and Simulation in Materials Science and Engineering, 1(2), 111–132. https://doi.org/10.1088/0965-0393/1/2/001\n\nArguments\n\nσₘₐₓ::Float64: cohesive normal strength\nτₘₐₓ::Float64: cohesive tangential strength (in-plane strength)\nΦₙ::Float64: normal work of separation\nΦₜ::Float64: tangential work of separation\nΔₙˢ: normal separation after complete shear separation under the condition of zero normal tension\n\nFor convenience the following functions can be used to convert parameters:\n\nxu_needleman_Φₙ\nxu_needleman_Φₜ\nxu_needleman_σₘₐₓ\nxu_needleman_τₘₐₓ\n\n\n\n\n\n","category":"type"},{"location":"materials/XuNeedleman.html#MaterialModels.material_response-Union{Tuple{dim}, Tuple{XuNeedleman, Tensor{1, dim}}, Tuple{XuNeedleman, Tensor{1, dim}, XuNeedlemanState}, Tuple{XuNeedleman, Tensor{1, dim}, XuNeedlemanState, Any}, Tuple{XuNeedleman, Tensor{1, dim}, XuNeedlemanState, Any, Any}, Tuple{XuNeedleman, Tensor{1, dim}, XuNeedlemanState, Any, Any, Any}} where dim","page":"XuNeedleman","title":"MaterialModels.material_response","text":"material_response(m::XuNeedleman, Δ::Tensor{1,dim}) where dim\n\nReturn the traction vector and the traction tangent for the given separation jump Δ. The last entry of Δ is interpreted as normal separation, the first entries are interpreted as in-plane separations.\n\nNo MaterialState is needed for the stress computation, thus if a state is handed over to material_response, the same state is returned.\n\n\n\n\n\n","category":"method"},{"location":"materials/XuNeedleman.html#MaterialModels.xu_needleman_Φₙ-Tuple{Any, Any}","page":"XuNeedleman","title":"MaterialModels.xu_needleman_Φₙ","text":"xu_needleman_Φₙ(σₘₐₓ, δₙ)\n\nCompute the normal work of separation Φₙ for the Xu-Needleman cohesive law based on the cohesive normal strength σₘₐₓ and the characteristic normal separation δₙ.\n\n\n\n\n\n","category":"method"},{"location":"materials/XuNeedleman.html#MaterialModels.xu_needleman_Φₜ-Tuple{Any, Any}","page":"XuNeedleman","title":"MaterialModels.xu_needleman_Φₜ","text":"xu_needleman_Φₜ(τₘₐₓ, δₜ)\n\nCompute the tangential work of separation Φₜ for the Xu-Needleman cohesive law based on the cohesive tangential strength τₘₐₓ and the characteristic tangential separation δₜ.\n\n\n\n\n\n","category":"method"},{"location":"materials/XuNeedleman.html#MaterialModels.xu_needleman_σₘₐₓ-Tuple{Any, Any}","page":"XuNeedleman","title":"MaterialModels.xu_needleman_σₘₐₓ","text":"xu_needleman_σₘₐₓ(Φₙ, δₙ) = Φₙ / (exp(1.0) * δₙ)\n\nCompute the cohesive normal strength σₘₐₓ for the Xu-Needleman cohesive law based on the normal work of separation Φₙ and the characteristic normal separation δₙ.\n\n\n\n\n\n","category":"method"},{"location":"materials/XuNeedleman.html#MaterialModels.xu_needleman_τₘₐₓ-Tuple{Any, Any}","page":"XuNeedleman","title":"MaterialModels.xu_needleman_τₘₐₓ","text":"xu_needleman_τₘₐₓ(Φₜ, δₜ)\n\nCompute the cohesive tangential strength τₘₐₓ for the Xu-Needleman cohesive law based on the tangential work of separation Φₜ and the characteristic tangential separation δₜ.\n\n\n\n\n\n","category":"method"},{"location":"index.html#Materials","page":"Home","title":"Materials","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Welcome to MaterialModels.jl","category":"page"},{"location":"materials/Plastic.html#Plastic","page":"Plastic","title":"Plastic","text":"","category":"section"},{"location":"materials/Plastic.html","page":"Plastic","title":"Plastic","text":"Plastic\nmaterial_response(m::Plastic, Δε::SymmetricTensor{2,3,T,6}, state::PlasticState{3}; kwargs...) where T","category":"page"},{"location":"materials/Plastic.html#MaterialModels.Plastic","page":"Plastic","title":"MaterialModels.Plastic","text":"Plastic(E, ν, σ_y, H, r, κ_∞, α_∞)\n\nPlasticity with von Mises yield surface and mixed non-linear kinematic + non-linear isotropic hardening. Both hardening laws are of saturation type.\n\nArguments\n\nE::Float64: Young's modulus\nν::Float64: Poisson's ratio\nσ_y: yield limit\nH: hardening modulus\nr: coupling parameter between isotropic and kinematic hardening\nκ_∞: saturation stress for isotropic hardening\nα_∞: saturation stress for kinematic hardening\n\n\n\n\n\n","category":"type"},{"location":"materials/Plastic.html#MaterialModels.material_response-Union{Tuple{T}, Tuple{Plastic, SymmetricTensor{2, 3, T, 6}, PlasticState{3}}} where T","page":"Plastic","title":"MaterialModels.material_response","text":"material_response(m::Plastic, ε::SymmetricTensor{2,3,T,6}, state::PlasticState{3}; <keyword arguments>)\n\nReturn the stress tensor, stress tangent and the new MaterialState for the given strain ε and previous material state state.\n\nPlastic free energy:\n\nPsi^textp = frac12  r  H  k^2\n+ frac12left( 1-r right)  H  left sqrtfrac23 left textdev left(mathbfa right) right right^2\n\nVon Mises yield function:\n\nPhi = sqrtfrac32 left textdev left( boldsymbolsigma - boldsymbolalpha right) right - sigma_y - kappa\n\nAn associative flow rule and non-associative hardening rules are used. The evolution equations for the hardening variables are:\n\nbeginaligned\ndotk = -lambda left( 1 - frackappakappa_infty right) \ndotmathbfa = -lambda left( fracpartialPhipartialboldsymbolsigma \n+ frac32alpha_infty  textdev left( boldsymbolalpha right) right) \nendaligned\n\nKeyword arguments\n\ncache: Cache for the iterative solver, used by NLsolve.jl. It is strongly recommended to pre-allocate the cache for repeated calls to material_response. See get_cache.\noptions::Dict{Symbol, Any}: Solver options for the non-linear solver. Under the key :nlsolve_params keyword arguments for nlsolve can be handed over.\n\nSee NLsolve documentation. By default the Newton solver will be used.\n\n\n\n\n\n","category":"method"}]
}
